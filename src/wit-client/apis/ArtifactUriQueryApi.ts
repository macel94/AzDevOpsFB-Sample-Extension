/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArtifactUriQuery,
  ArtifactUriQueryResult,
} from '../models/index';
import {
    ArtifactUriQueryFromJSON,
    ArtifactUriQueryToJSON,
    ArtifactUriQueryResultFromJSON,
    ArtifactUriQueryResultToJSON,
} from '../models/index';

export interface ArtifactUriQueryQueryRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: ArtifactUriQuery;
}

/**
 * 
 */
export class ArtifactUriQueryApi extends runtime.BaseAPI {

    /**
     * Queries work items linked to a given list of artifact URI.
     */
    async artifactUriQueryQueryRaw(requestParameters: ArtifactUriQueryQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArtifactUriQueryResult>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling artifactUriQueryQuery().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling artifactUriQueryQuery().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling artifactUriQueryQuery().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling artifactUriQueryQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/artifacturiquery`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArtifactUriQueryToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArtifactUriQueryResultFromJSON(jsonValue));
    }

    /**
     * Queries work items linked to a given list of artifact URI.
     */
    async artifactUriQueryQuery(requestParameters: ArtifactUriQueryQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArtifactUriQueryResult> {
        const response = await this.artifactUriQueryQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

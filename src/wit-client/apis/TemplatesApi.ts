/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemTemplate,
  WorkItemTemplateReference,
} from '../models/index';
import {
    WorkItemTemplateFromJSON,
    WorkItemTemplateToJSON,
    WorkItemTemplateReferenceFromJSON,
    WorkItemTemplateReferenceToJSON,
} from '../models/index';

export interface TemplatesCreateRequest {
    organization: string;
    project: string;
    team: string;
    apiVersion: string;
    body: WorkItemTemplate;
}

export interface TemplatesDeleteRequest {
    organization: string;
    project: string;
    team: string;
    templateId: string;
    apiVersion: string;
}

export interface TemplatesGetRequest {
    organization: string;
    project: string;
    team: string;
    templateId: string;
    apiVersion: string;
}

export interface TemplatesListRequest {
    organization: string;
    project: string;
    team: string;
    apiVersion: string;
    workitemtypename?: string;
}

export interface TemplatesReplaceTemplateRequest {
    organization: string;
    project: string;
    team: string;
    templateId: string;
    apiVersion: string;
    body: WorkItemTemplate;
}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Creates a template
     */
    async templatesCreateRaw(requestParameters: TemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTemplate>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling templatesCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling templatesCreate().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling templatesCreate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling templatesCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling templatesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/templates`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemTemplateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTemplateFromJSON(jsonValue));
    }

    /**
     * Creates a template
     */
    async templatesCreate(requestParameters: TemplatesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTemplate> {
        const response = await this.templatesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the template with given id
     */
    async templatesDeleteRaw(requestParameters: TemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling templatesDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling templatesDelete().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling templatesDelete().'
            );
        }

        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling templatesDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling templatesDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/templates/{templateId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the template with given id
     */
    async templatesDelete(requestParameters: TemplatesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.templatesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the template with specified id
     */
    async templatesGetRaw(requestParameters: TemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTemplate>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling templatesGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling templatesGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling templatesGet().'
            );
        }

        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling templatesGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling templatesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/templates/{templateId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTemplateFromJSON(jsonValue));
    }

    /**
     * Gets the template with specified id
     */
    async templatesGet(requestParameters: TemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTemplate> {
        const response = await this.templatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets template
     */
    async templatesListRaw(requestParameters: TemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemTemplateReference>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling templatesList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling templatesList().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling templatesList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling templatesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workitemtypename'] != null) {
            queryParameters['workitemtypename'] = requestParameters['workitemtypename'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/templates`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemTemplateReferenceFromJSON));
    }

    /**
     * Gets template
     */
    async templatesList(requestParameters: TemplatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemTemplateReference>> {
        const response = await this.templatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace template contents
     */
    async templatesReplaceTemplateRaw(requestParameters: TemplatesReplaceTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTemplate>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling templatesReplaceTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/templates/{templateId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))).replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemTemplateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTemplateFromJSON(jsonValue));
    }

    /**
     * Replace template contents
     */
    async templatesReplaceTemplate(requestParameters: TemplatesReplaceTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTemplate> {
        const response = await this.templatesReplaceTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItem,
} from '../models/index';
import {
    WorkItemFromJSON,
    WorkItemToJSON,
} from '../models/index';

export interface RevisionsGetRequest {
    organization: string;
    id: number;
    revisionNumber: number;
    project: string;
    apiVersion: string;
    $expand?: RevisionsGetExpandEnum;
}

export interface RevisionsListRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    $top?: number;
    $skip?: number;
    $expand?: RevisionsListExpandEnum;
}

/**
 * 
 */
export class RevisionsApi extends runtime.BaseAPI {

    /**
     * Returns a fully hydrated work item for the requested revision
     */
    async revisionsGetRaw(requestParameters: RevisionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling revisionsGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revisionsGet().'
            );
        }

        if (requestParameters['revisionNumber'] == null) {
            throw new runtime.RequiredError(
                'revisionNumber',
                'Required parameter "revisionNumber" was null or undefined when calling revisionsGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling revisionsGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling revisionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{id}/revisions/{revisionNumber}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"revisionNumber"}}`, encodeURIComponent(String(requestParameters['revisionNumber']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemFromJSON(jsonValue));
    }

    /**
     * Returns a fully hydrated work item for the requested revision
     */
    async revisionsGet(requestParameters: RevisionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItem> {
        const response = await this.revisionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of fully hydrated work item revisions, paged.
     */
    async revisionsListRaw(requestParameters: RevisionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItem>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling revisionsList().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling revisionsList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling revisionsList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling revisionsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['$skip'] != null) {
            queryParameters['$skip'] = requestParameters['$skip'];
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{id}/revisions`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemFromJSON));
    }

    /**
     * Returns the list of fully hydrated work item revisions, paged.
     */
    async revisionsList(requestParameters: RevisionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItem>> {
        const response = await this.revisionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const RevisionsGetExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type RevisionsGetExpandEnum = typeof RevisionsGetExpandEnum[keyof typeof RevisionsGetExpandEnum];
/**
 * @export
 */
export const RevisionsListExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type RevisionsListExpandEnum = typeof RevisionsListExpandEnum[keyof typeof RevisionsListExpandEnum];

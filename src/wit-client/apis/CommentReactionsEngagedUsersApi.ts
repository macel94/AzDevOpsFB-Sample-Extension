/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentityRef,
} from '../models/index';
import {
    IdentityRefFromJSON,
    IdentityRefToJSON,
} from '../models/index';

export interface CommentReactionsEngagedUsersListRequest {
    organization: string;
    project: string;
    workItemId: number;
    commentId: number;
    reactionType: CommentReactionsEngagedUsersListReactionTypeEnum;
    apiVersion: string;
    $top?: number;
    $skip?: number;
}

/**
 * 
 */
export class CommentReactionsEngagedUsersApi extends runtime.BaseAPI {

    /**
     * Get users who reacted on the comment.
     */
    async commentReactionsEngagedUsersListRaw(requestParameters: CommentReactionsEngagedUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityRef>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        if (requestParameters['reactionType'] == null) {
            throw new runtime.RequiredError(
                'reactionType',
                'Required parameter "reactionType" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentReactionsEngagedUsersList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['$skip'] != null) {
            queryParameters['$skip'] = requestParameters['$skip'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}/reactions/{reactionType}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"reactionType"}}`, encodeURIComponent(String(requestParameters['reactionType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityRefFromJSON));
    }

    /**
     * Get users who reacted on the comment.
     */
    async commentReactionsEngagedUsersList(requestParameters: CommentReactionsEngagedUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityRef>> {
        const response = await this.commentReactionsEngagedUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CommentReactionsEngagedUsersListReactionTypeEnum = {
    Like: 'like',
    Dislike: 'dislike',
    Heart: 'heart',
    Hooray: 'hooray',
    Smile: 'smile',
    Confused: 'confused'
} as const;
export type CommentReactionsEngagedUsersListReactionTypeEnum = typeof CommentReactionsEngagedUsersListReactionTypeEnum[keyof typeof CommentReactionsEngagedUsersListReactionTypeEnum];

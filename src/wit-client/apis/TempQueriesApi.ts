/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TemporaryQueryRequestModel,
  TemporaryQueryResponseModel,
} from '../models/index';
import {
    TemporaryQueryRequestModelFromJSON,
    TemporaryQueryRequestModelToJSON,
    TemporaryQueryResponseModelFromJSON,
    TemporaryQueryResponseModelToJSON,
} from '../models/index';

export interface TempQueriesCreateRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: TemporaryQueryRequestModel;
}

/**
 * 
 */
export class TempQueriesApi extends runtime.BaseAPI {

    /**
     * Creates a temporary query  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
     */
    async tempQueriesCreateRaw(requestParameters: TempQueriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemporaryQueryResponseModel>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling tempQueriesCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling tempQueriesCreate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling tempQueriesCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tempQueriesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/tempqueries`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemporaryQueryRequestModelToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemporaryQueryResponseModelFromJSON(jsonValue));
    }

    /**
     * Creates a temporary query  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
     */
    async tempQueriesCreate(requestParameters: TempQueriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemporaryQueryResponseModel> {
        const response = await this.tempQueriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

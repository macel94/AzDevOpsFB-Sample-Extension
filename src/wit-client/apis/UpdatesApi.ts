/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemUpdate,
} from '../models/index';
import {
    WorkItemUpdateFromJSON,
    WorkItemUpdateToJSON,
} from '../models/index';

export interface UpdatesGetRequest {
    organization: string;
    id: number;
    updateNumber: number;
    project: string;
    apiVersion: string;
}

export interface UpdatesListRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    $top?: number;
    $skip?: number;
}

/**
 * 
 */
export class UpdatesApi extends runtime.BaseAPI {

    /**
     * Returns a single update for a work item
     */
    async updatesGetRaw(requestParameters: UpdatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemUpdate>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updatesGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatesGet().'
            );
        }

        if (requestParameters['updateNumber'] == null) {
            throw new runtime.RequiredError(
                'updateNumber',
                'Required parameter "updateNumber" was null or undefined when calling updatesGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling updatesGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling updatesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{id}/updates/{updateNumber}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"updateNumber"}}`, encodeURIComponent(String(requestParameters['updateNumber']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemUpdateFromJSON(jsonValue));
    }

    /**
     * Returns a single update for a work item
     */
    async updatesGet(requestParameters: UpdatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemUpdate> {
        const response = await this.updatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the deltas between work item revisions
     */
    async updatesListRaw(requestParameters: UpdatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemUpdate>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updatesList().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatesList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling updatesList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling updatesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['$skip'] != null) {
            queryParameters['$skip'] = requestParameters['$skip'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{id}/updates`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemUpdateFromJSON));
    }

    /**
     * Returns the deltas between work item revisions
     */
    async updatesList(requestParameters: UpdatesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemUpdate>> {
        const response = await this.updatesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

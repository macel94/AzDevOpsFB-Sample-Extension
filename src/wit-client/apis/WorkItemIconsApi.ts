/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemIcon,
} from '../models/index';
import {
    WorkItemIconFromJSON,
    WorkItemIconToJSON,
} from '../models/index';

export interface WorkItemIconsGetRequest {
    icon: string;
    organization: string;
    apiVersion: string;
    color?: string;
    v?: number;
}

export interface WorkItemIconsListRequest {
    organization: string;
    apiVersion: string;
}

/**
 * 
 */
export class WorkItemIconsApi extends runtime.BaseAPI {

    /**
     * Get a work item icon given the friendly name and icon color.
     */
    async workItemIconsGetRaw(requestParameters: WorkItemIconsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemIcon>> {
        if (requestParameters['icon'] == null) {
            throw new runtime.RequiredError(
                'icon',
                'Required parameter "icon" was null or undefined when calling workItemIconsGet().'
            );
        }

        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemIconsGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemIconsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['color'] != null) {
            queryParameters['color'] = requestParameters['color'];
        }

        if (requestParameters['v'] != null) {
            queryParameters['v'] = requestParameters['v'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/_apis/wit/workitemicons/{icon}`.replace(`{${"icon"}}`, encodeURIComponent(String(requestParameters['icon']))).replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemIconFromJSON(jsonValue));
    }

    /**
     * Get a work item icon given the friendly name and icon color.
     */
    async workItemIconsGet(requestParameters: WorkItemIconsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemIcon> {
        const response = await this.workItemIconsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all work item icons.
     */
    async workItemIconsListRaw(requestParameters: WorkItemIconsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemIcon>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemIconsList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemIconsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/_apis/wit/workitemicons`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemIconFromJSON));
    }

    /**
     * Get a list of all work item icons.
     */
    async workItemIconsList(requestParameters: WorkItemIconsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemIcon>> {
        const response = await this.workItemIconsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  QueryBatchGetRequest,
  QueryHierarchyItem,
} from '../models/index';
import {
    QueryBatchGetRequestFromJSON,
    QueryBatchGetRequestToJSON,
    QueryHierarchyItemFromJSON,
    QueryHierarchyItemToJSON,
} from '../models/index';

export interface QueriesCreateRequest {
    organization: string;
    project: string;
    query: string;
    apiVersion: string;
    body: QueryHierarchyItem;
    validateWiqlOnly?: boolean;
}

export interface QueriesDeleteRequest {
    organization: string;
    project: string;
    query: string;
    apiVersion: string;
}

export interface QueriesGetRequest {
    organization: string;
    project: string;
    query: string;
    apiVersion: string;
    $expand?: QueriesGetExpandEnum;
    $depth?: number;
    $includeDeleted?: boolean;
    $useIsoDateFormat?: boolean;
}

export interface QueriesGetQueriesBatchRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: QueryBatchGetRequest;
}

export interface QueriesListRequest {
    organization: string;
    project: string;
    apiVersion: string;
    $expand?: QueriesListExpandEnum;
    $depth?: number;
    $includeDeleted?: boolean;
}

export interface QueriesUpdateRequest {
    organization: string;
    project: string;
    query: string;
    apiVersion: string;
    body: QueryHierarchyItem;
    $undeleteDescendants?: boolean;
}

/**
 * 
 */
export class QueriesApi extends runtime.BaseAPI {

    /**
     * Creates a query, or moves a query.  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
     */
    async queriesCreateRaw(requestParameters: QueriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryHierarchyItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesCreate().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling queriesCreate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling queriesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['validateWiqlOnly'] != null) {
            queryParameters['validateWiqlOnly'] = requestParameters['validateWiqlOnly'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queries/{query}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryHierarchyItemToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryHierarchyItemFromJSON(jsonValue));
    }

    /**
     * Creates a query, or moves a query.  Learn more about Work Item Query Language (WIQL) syntax [here](https://docs.microsoft.com/en-us/vsts/collaborate/wiql-syntax?toc=/vsts/work/track/toc.json&bc=/vsts/work/track/breadcrumb/toc.json&view=vsts).
     */
    async queriesCreate(requestParameters: QueriesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryHierarchyItem> {
        const response = await this.queriesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
     */
    async queriesDeleteRaw(requestParameters: QueriesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesDelete().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling queriesDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queries/{query}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a query or a folder. This deletes any permission change on the deleted query or folder and any of its descendants if it is a folder. It is important to note that the deleted permission changes cannot be recovered upon undeleting the query or folder.
     */
    async queriesDelete(requestParameters: QueriesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.queriesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an individual query and its children
     */
    async queriesGetRaw(requestParameters: QueriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryHierarchyItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesGet().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling queriesGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['$depth'] != null) {
            queryParameters['$depth'] = requestParameters['$depth'];
        }

        if (requestParameters['$includeDeleted'] != null) {
            queryParameters['$includeDeleted'] = requestParameters['$includeDeleted'];
        }

        if (requestParameters['$useIsoDateFormat'] != null) {
            queryParameters['$useIsoDateFormat'] = requestParameters['$useIsoDateFormat'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queries/{query}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryHierarchyItemFromJSON(jsonValue));
    }

    /**
     * Retrieves an individual query and its children
     */
    async queriesGet(requestParameters: QueriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryHierarchyItem> {
        const response = await this.queriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of queries by ids (Maximum 1000)
     */
    async queriesGetQueriesBatchRaw(requestParameters: QueriesGetQueriesBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QueryHierarchyItem>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesGetQueriesBatch().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesGetQueriesBatch().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesGetQueriesBatch().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling queriesGetQueriesBatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queriesbatch`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QueryBatchGetRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueryHierarchyItemFromJSON));
    }

    /**
     * Gets a list of queries by ids (Maximum 1000)
     */
    async queriesGetQueriesBatch(requestParameters: QueriesGetQueriesBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QueryHierarchyItem>> {
        const response = await this.queriesGetQueriesBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the root queries and their children
     */
    async queriesListRaw(requestParameters: QueriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QueryHierarchyItem>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['$depth'] != null) {
            queryParameters['$depth'] = requestParameters['$depth'];
        }

        if (requestParameters['$includeDeleted'] != null) {
            queryParameters['$includeDeleted'] = requestParameters['$includeDeleted'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queries`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueryHierarchyItemFromJSON));
    }

    /**
     * Gets the root queries and their children
     */
    async queriesList(requestParameters: QueriesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QueryHierarchyItem>> {
        const response = await this.queriesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a query or a folder. This allows you to update, rename and move queries and folders.
     */
    async queriesUpdateRaw(requestParameters: QueriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueryHierarchyItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling queriesUpdate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling queriesUpdate().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling queriesUpdate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling queriesUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling queriesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$undeleteDescendants'] != null) {
            queryParameters['$undeleteDescendants'] = requestParameters['$undeleteDescendants'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/queries/{query}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"query"}}`, encodeURIComponent(String(requestParameters['query']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QueryHierarchyItemToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueryHierarchyItemFromJSON(jsonValue));
    }

    /**
     * Update a query or a folder. This allows you to update, rename and move queries and folders.
     */
    async queriesUpdate(requestParameters: QueriesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueryHierarchyItem> {
        const response = await this.queriesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const QueriesGetExpandEnum = {
    None: 'none',
    Wiql: 'wiql',
    Clauses: 'clauses',
    All: 'all',
    Minimal: 'minimal'
} as const;
export type QueriesGetExpandEnum = typeof QueriesGetExpandEnum[keyof typeof QueriesGetExpandEnum];
/**
 * @export
 */
export const QueriesListExpandEnum = {
    None: 'none',
    Wiql: 'wiql',
    Clauses: 'clauses',
    All: 'all',
    Minimal: 'minimal'
} as const;
export type QueriesListExpandEnum = typeof QueriesListExpandEnum[keyof typeof QueriesListExpandEnum];

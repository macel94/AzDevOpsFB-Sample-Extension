/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemTagDefinition,
} from '../models/index';
import {
    WorkItemTagDefinitionFromJSON,
    WorkItemTagDefinitionToJSON,
} from '../models/index';

export interface TagsDeleteRequest {
    organization: string;
    project: string;
    tagIdOrName: string;
    apiVersion: string;
}

export interface TagsGetRequest {
    organization: string;
    project: string;
    tagIdOrName: string;
    apiVersion: string;
}

export interface TagsListRequest {
    organization: string;
    project: string;
    apiVersion: string;
}

export interface TagsUpdateRequest {
    organization: string;
    project: string;
    tagIdOrName: string;
    apiVersion: string;
    body: WorkItemTagDefinition;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Delete the tag for the project. Please note, that the deleted tag will be removed from all Work Items as well as Pull Requests.
     */
    async tagsDeleteRaw(requestParameters: TagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling tagsDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling tagsDelete().'
            );
        }

        if (requestParameters['tagIdOrName'] == null) {
            throw new runtime.RequiredError(
                'tagIdOrName',
                'Required parameter "tagIdOrName" was null or undefined when calling tagsDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling tagsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/tags/{tagIdOrName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"tagIdOrName"}}`, encodeURIComponent(String(requestParameters['tagIdOrName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the tag for the project. Please note, that the deleted tag will be removed from all Work Items as well as Pull Requests.
     */
    async tagsDelete(requestParameters: TagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get the tag for the project.
     */
    async tagsGetRaw(requestParameters: TagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTagDefinition>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling tagsGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling tagsGet().'
            );
        }

        if (requestParameters['tagIdOrName'] == null) {
            throw new runtime.RequiredError(
                'tagIdOrName',
                'Required parameter "tagIdOrName" was null or undefined when calling tagsGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling tagsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/tags/{tagIdOrName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"tagIdOrName"}}`, encodeURIComponent(String(requestParameters['tagIdOrName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTagDefinitionFromJSON(jsonValue));
    }

    /**
     * Get the tag for the project.
     */
    async tagsGet(requestParameters: TagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTagDefinition> {
        const response = await this.tagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the tags for the project.
     */
    async tagsListRaw(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemTagDefinition>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling tagsList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling tagsList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling tagsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/tags`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemTagDefinitionFromJSON));
    }

    /**
     * Get all the tags for the project.
     */
    async tagsList(requestParameters: TagsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemTagDefinition>> {
        const response = await this.tagsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the tag for the project.
     */
    async tagsUpdateRaw(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTagDefinition>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['tagIdOrName'] == null) {
            throw new runtime.RequiredError(
                'tagIdOrName',
                'Required parameter "tagIdOrName" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling tagsUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling tagsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/tags/{tagIdOrName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"tagIdOrName"}}`, encodeURIComponent(String(requestParameters['tagIdOrName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemTagDefinitionToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTagDefinitionFromJSON(jsonValue));
    }

    /**
     * Update the tag for the project.
     */
    async tagsUpdate(requestParameters: TagsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTagDefinition> {
        const response = await this.tagsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

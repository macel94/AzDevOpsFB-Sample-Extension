/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JsonPatchDocument,
  JsonPatchOperation,
  WorkItem,
  WorkItemBatchGetRequest,
  WorkItemDelete,
  WorkItemDeleteBatch,
  WorkItemDeleteBatchRequest,
} from '../models/index';
import {
    JsonPatchDocumentFromJSON,
    JsonPatchDocumentToJSON,
    JsonPatchOperationFromJSON,
    JsonPatchOperationToJSON,
    WorkItemFromJSON,
    WorkItemToJSON,
    WorkItemBatchGetRequestFromJSON,
    WorkItemBatchGetRequestToJSON,
    WorkItemDeleteFromJSON,
    WorkItemDeleteToJSON,
    WorkItemDeleteBatchFromJSON,
    WorkItemDeleteBatchToJSON,
    WorkItemDeleteBatchRequestFromJSON,
    WorkItemDeleteBatchRequestToJSON,
} from '../models/index';

export interface WorkItemsCreateRequest {
    organization: string;
    project: string;
    type: string;
    apiVersion: string;
    body: JsonPatchDocument;
    validateOnly?: boolean;
    bypassRules?: boolean;
    suppressNotifications?: boolean;
    $expand?: WorkItemsCreateExpandEnum;
}

export interface WorkItemsDeleteRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    destroy?: boolean;
}

export interface WorkItemsDeleteWorkItemsRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: WorkItemDeleteBatchRequest;
}

export interface WorkItemsGetWorkItemRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    fields?: string;
    asOf?: Date;
    $expand?: WorkItemsGetWorkItemExpandEnum;
}

export interface WorkItemsGetWorkItemTemplateRequest {
    organization: string;
    project: string;
    type: string;
    apiVersion: string;
    fields?: string;
    asOf?: Date;
    $expand?: WorkItemsGetWorkItemTemplateExpandEnum;
}

export interface WorkItemsGetWorkItemsBatchRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: WorkItemBatchGetRequest;
}

export interface WorkItemsListRequest {
    organization: string;
    ids: string;
    project: string;
    apiVersion: string;
    fields?: string;
    asOf?: Date;
    $expand?: WorkItemsListExpandEnum;
    errorPolicy?: WorkItemsListErrorPolicyEnum;
}

export interface WorkItemsUpdateRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    body: JsonPatchDocument;
    validateOnly?: boolean;
    bypassRules?: boolean;
    suppressNotifications?: boolean;
    $expand?: WorkItemsUpdateExpandEnum;
}

/**
 * 
 */
export class WorkItemsApi extends runtime.BaseAPI {

    /**
     * Creates a single work item.
     */
    async workItemsCreateRaw(requestParameters: WorkItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsCreate().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling workItemsCreate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workItemsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['validateOnly'] != null) {
            queryParameters['validateOnly'] = requestParameters['validateOnly'];
        }

        if (requestParameters['bypassRules'] != null) {
            queryParameters['bypassRules'] = requestParameters['bypassRules'];
        }

        if (requestParameters['suppressNotifications'] != null) {
            queryParameters['suppressNotifications'] = requestParameters['suppressNotifications'];
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems/${type}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JsonPatchDocumentToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemFromJSON(jsonValue));
    }

    /**
     * Creates a single work item.
     */
    async workItemsCreate(requestParameters: WorkItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItem> {
        const response = await this.workItemsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.
     */
    async workItemsDeleteRaw(requestParameters: WorkItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemDelete>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsDelete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workItemsDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['destroy'] != null) {
            queryParameters['destroy'] = requestParameters['destroy'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemDeleteFromJSON(jsonValue));
    }

    /**
     * Deletes the specified work item and sends it to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion. It is recommended NOT to use this parameter. If you do, please use this parameter with extreme caution.
     */
    async workItemsDelete(requestParameters: WorkItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemDelete> {
        const response = await this.workItemsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes specified work items and sends them to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion.
     */
    async workItemsDeleteWorkItemsRaw(requestParameters: WorkItemsDeleteWorkItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemDeleteBatch>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsDeleteWorkItems().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsDeleteWorkItems().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsDeleteWorkItems().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workItemsDeleteWorkItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitemsdelete`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemDeleteBatchRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemDeleteBatchFromJSON(jsonValue));
    }

    /**
     * Deletes specified work items and sends them to the Recycle Bin, so that it can be restored back, if required. Optionally, if the destroy parameter has been set to true, it destroys the work item permanently. WARNING: If the destroy parameter is set to true, work items deleted by this command will NOT go to recycle-bin and there is no way to restore/recover them after deletion.
     */
    async workItemsDeleteWorkItems(requestParameters: WorkItemsDeleteWorkItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemDeleteBatch> {
        const response = await this.workItemsDeleteWorkItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single work item.
     */
    async workItemsGetWorkItemRaw(requestParameters: WorkItemsGetWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsGetWorkItem().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workItemsGetWorkItem().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsGetWorkItem().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsGetWorkItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['asOf'] != null) {
            queryParameters['asOf'] = (requestParameters['asOf'] as any).toISOString();
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemFromJSON(jsonValue));
    }

    /**
     * Returns a single work item.
     */
    async workItemsGetWorkItem(requestParameters: WorkItemsGetWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItem> {
        const response = await this.workItemsGetWorkItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single work item from a template.
     */
    async workItemsGetWorkItemTemplateRaw(requestParameters: WorkItemsGetWorkItemTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsGetWorkItemTemplate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsGetWorkItemTemplate().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling workItemsGetWorkItemTemplate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsGetWorkItemTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['asOf'] != null) {
            queryParameters['asOf'] = (requestParameters['asOf'] as any).toISOString();
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems/${type}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemFromJSON(jsonValue));
    }

    /**
     * Returns a single work item from a template.
     */
    async workItemsGetWorkItemTemplate(requestParameters: WorkItemsGetWorkItemTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItem> {
        const response = await this.workItemsGetWorkItemTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets work items for a list of work item ids (Maximum 200)
     */
    async workItemsGetWorkItemsBatchRaw(requestParameters: WorkItemsGetWorkItemsBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItem>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsGetWorkItemsBatch().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsGetWorkItemsBatch().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsGetWorkItemsBatch().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workItemsGetWorkItemsBatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitemsbatch`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemBatchGetRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemFromJSON));
    }

    /**
     * Gets work items for a list of work item ids (Maximum 200)
     */
    async workItemsGetWorkItemsBatch(requestParameters: WorkItemsGetWorkItemsBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItem>> {
        const response = await this.workItemsGetWorkItemsBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of work items (Maximum 200)
     */
    async workItemsListRaw(requestParameters: WorkItemsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItem>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsList().'
            );
        }

        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling workItemsList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['asOf'] != null) {
            queryParameters['asOf'] = (requestParameters['asOf'] as any).toISOString();
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['errorPolicy'] != null) {
            queryParameters['errorPolicy'] = requestParameters['errorPolicy'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemFromJSON));
    }

    /**
     * Returns a list of work items (Maximum 200)
     */
    async workItemsList(requestParameters: WorkItemsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItem>> {
        const response = await this.workItemsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a single work item.
     */
    async workItemsUpdateRaw(requestParameters: WorkItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItem>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemsUpdate().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling workItemsUpdate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemsUpdate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemsUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling workItemsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['validateOnly'] != null) {
            queryParameters['validateOnly'] = requestParameters['validateOnly'];
        }

        if (requestParameters['bypassRules'] != null) {
            queryParameters['bypassRules'] = requestParameters['bypassRules'];
        }

        if (requestParameters['suppressNotifications'] != null) {
            queryParameters['suppressNotifications'] = requestParameters['suppressNotifications'];
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitems/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JsonPatchDocumentToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemFromJSON(jsonValue));
    }

    /**
     * Updates a single work item.
     */
    async workItemsUpdate(requestParameters: WorkItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItem> {
        const response = await this.workItemsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const WorkItemsCreateExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type WorkItemsCreateExpandEnum = typeof WorkItemsCreateExpandEnum[keyof typeof WorkItemsCreateExpandEnum];
/**
 * @export
 */
export const WorkItemsGetWorkItemExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type WorkItemsGetWorkItemExpandEnum = typeof WorkItemsGetWorkItemExpandEnum[keyof typeof WorkItemsGetWorkItemExpandEnum];
/**
 * @export
 */
export const WorkItemsGetWorkItemTemplateExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type WorkItemsGetWorkItemTemplateExpandEnum = typeof WorkItemsGetWorkItemTemplateExpandEnum[keyof typeof WorkItemsGetWorkItemTemplateExpandEnum];
/**
 * @export
 */
export const WorkItemsListExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type WorkItemsListExpandEnum = typeof WorkItemsListExpandEnum[keyof typeof WorkItemsListExpandEnum];
/**
 * @export
 */
export const WorkItemsListErrorPolicyEnum = {
    Fail: 'fail',
    Omit: 'omit'
} as const;
export type WorkItemsListErrorPolicyEnum = typeof WorkItemsListErrorPolicyEnum[keyof typeof WorkItemsListErrorPolicyEnum];
/**
 * @export
 */
export const WorkItemsUpdateExpandEnum = {
    None: 'none',
    Relations: 'relations',
    Fields: 'fields',
    Links: 'links',
    All: 'all'
} as const;
export type WorkItemsUpdateExpandEnum = typeof WorkItemsUpdateExpandEnum[keyof typeof WorkItemsUpdateExpandEnum];

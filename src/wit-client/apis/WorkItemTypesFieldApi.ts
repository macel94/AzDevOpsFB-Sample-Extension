/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemTypeFieldWithReferences,
} from '../models/index';
import {
    WorkItemTypeFieldWithReferencesFromJSON,
    WorkItemTypeFieldWithReferencesToJSON,
} from '../models/index';

export interface WorkItemTypesFieldGetRequest {
    organization: string;
    project: string;
    type: string;
    field: string;
    apiVersion: string;
    $expand?: WorkItemTypesFieldGetExpandEnum;
}

export interface WorkItemTypesFieldListRequest {
    organization: string;
    project: string;
    type: string;
    apiVersion: string;
    $expand?: WorkItemTypesFieldListExpandEnum;
}

/**
 * 
 */
export class WorkItemTypesFieldApi extends runtime.BaseAPI {

    /**
     * Get a field for a work item type with detailed references.
     */
    async workItemTypesFieldGetRaw(requestParameters: WorkItemTypesFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemTypeFieldWithReferences>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemTypesFieldGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemTypesFieldGet().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling workItemTypesFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling workItemTypesFieldGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemTypesFieldGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitemtypes/{type}/fields/{field}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemTypeFieldWithReferencesFromJSON(jsonValue));
    }

    /**
     * Get a field for a work item type with detailed references.
     */
    async workItemTypesFieldGet(requestParameters: WorkItemTypesFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemTypeFieldWithReferences> {
        const response = await this.workItemTypesFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of fields for a work item type with detailed references.
     */
    async workItemTypesFieldListRaw(requestParameters: WorkItemTypesFieldListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemTypeFieldWithReferences>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling workItemTypesFieldList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling workItemTypesFieldList().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling workItemTypesFieldList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling workItemTypesFieldList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workitemtypes/{type}/fields`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemTypeFieldWithReferencesFromJSON));
    }

    /**
     * Get a list of fields for a work item type with detailed references.
     */
    async workItemTypesFieldList(requestParameters: WorkItemTypesFieldListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemTypeFieldWithReferences>> {
        const response = await this.workItemTypesFieldListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const WorkItemTypesFieldGetExpandEnum = {
    None: 'none',
    AllowedValues: 'allowedValues',
    DependentFields: 'dependentFields',
    All: 'all'
} as const;
export type WorkItemTypesFieldGetExpandEnum = typeof WorkItemTypesFieldGetExpandEnum[keyof typeof WorkItemTypesFieldGetExpandEnum];
/**
 * @export
 */
export const WorkItemTypesFieldListExpandEnum = {
    None: 'none',
    AllowedValues: 'allowedValues',
    DependentFields: 'dependentFields',
    All: 'all'
} as const;
export type WorkItemTypesFieldListExpandEnum = typeof WorkItemTypesFieldListExpandEnum[keyof typeof WorkItemTypesFieldListExpandEnum];

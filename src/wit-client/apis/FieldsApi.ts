/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FieldUpdate,
  WorkItemField2,
} from '../models/index';
import {
    FieldUpdateFromJSON,
    FieldUpdateToJSON,
    WorkItemField2FromJSON,
    WorkItemField2ToJSON,
} from '../models/index';

export interface FieldsCreateRequest {
    organization: string;
    project: string;
    apiVersion: string;
    body: WorkItemField2;
}

export interface FieldsDeleteRequest {
    organization: string;
    fieldNameOrRefName: string;
    project: string;
    apiVersion: string;
}

export interface FieldsGetRequest {
    organization: string;
    fieldNameOrRefName: string;
    project: string;
    apiVersion: string;
}

export interface FieldsListRequest {
    organization: string;
    project: string;
    apiVersion: string;
    $expand?: FieldsListExpandEnum;
}

export interface FieldsUpdateRequest {
    organization: string;
    fieldNameOrRefName: string;
    project: string;
    apiVersion: string;
    body: FieldUpdate;
}

/**
 * 
 */
export class FieldsApi extends runtime.BaseAPI {

    /**
     * Create a new field.
     */
    async fieldsCreateRaw(requestParameters: FieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemField2>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling fieldsCreate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling fieldsCreate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling fieldsCreate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling fieldsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/fields`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemField2ToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemField2FromJSON(jsonValue));
    }

    /**
     * Create a new field.
     */
    async fieldsCreate(requestParameters: FieldsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemField2> {
        const response = await this.fieldsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the field. To undelete a filed, see \"Update Field\" API.
     */
    async fieldsDeleteRaw(requestParameters: FieldsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling fieldsDelete().'
            );
        }

        if (requestParameters['fieldNameOrRefName'] == null) {
            throw new runtime.RequiredError(
                'fieldNameOrRefName',
                'Required parameter "fieldNameOrRefName" was null or undefined when calling fieldsDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling fieldsDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling fieldsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"fieldNameOrRefName"}}`, encodeURIComponent(String(requestParameters['fieldNameOrRefName']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the field. To undelete a filed, see \"Update Field\" API.
     */
    async fieldsDelete(requestParameters: FieldsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fieldsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets information on a specific field.
     */
    async fieldsGetRaw(requestParameters: FieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemField2>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling fieldsGet().'
            );
        }

        if (requestParameters['fieldNameOrRefName'] == null) {
            throw new runtime.RequiredError(
                'fieldNameOrRefName',
                'Required parameter "fieldNameOrRefName" was null or undefined when calling fieldsGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling fieldsGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling fieldsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"fieldNameOrRefName"}}`, encodeURIComponent(String(requestParameters['fieldNameOrRefName']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemField2FromJSON(jsonValue));
    }

    /**
     * Gets information on a specific field.
     */
    async fieldsGet(requestParameters: FieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemField2> {
        const response = await this.fieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information for all fields. The project ID/name parameter is optional.
     */
    async fieldsListRaw(requestParameters: FieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemField2>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling fieldsList().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling fieldsList().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling fieldsList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/fields`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemField2FromJSON));
    }

    /**
     * Returns information for all fields. The project ID/name parameter is optional.
     */
    async fieldsList(requestParameters: FieldsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemField2>> {
        const response = await this.fieldsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a field.
     */
    async fieldsUpdateRaw(requestParameters: FieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemField2>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling fieldsUpdate().'
            );
        }

        if (requestParameters['fieldNameOrRefName'] == null) {
            throw new runtime.RequiredError(
                'fieldNameOrRefName',
                'Required parameter "fieldNameOrRefName" was null or undefined when calling fieldsUpdate().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling fieldsUpdate().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling fieldsUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling fieldsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/fields/{fieldNameOrRefName}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"fieldNameOrRefName"}}`, encodeURIComponent(String(requestParameters['fieldNameOrRefName']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FieldUpdateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemField2FromJSON(jsonValue));
    }

    /**
     * Update a field.
     */
    async fieldsUpdate(requestParameters: FieldsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemField2> {
        const response = await this.fieldsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const FieldsListExpandEnum = {
    None: 'none',
    ExtensionFields: 'extensionFields',
    IncludeDeleted: 'includeDeleted'
} as const;
export type FieldsListExpandEnum = typeof FieldsListExpandEnum[keyof typeof FieldsListExpandEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WorkItemDelete,
  WorkItemDeleteShallowReference,
  WorkItemDeleteUpdate,
} from '../models/index';
import {
    WorkItemDeleteFromJSON,
    WorkItemDeleteToJSON,
    WorkItemDeleteShallowReferenceFromJSON,
    WorkItemDeleteShallowReferenceToJSON,
    WorkItemDeleteUpdateFromJSON,
    WorkItemDeleteUpdateToJSON,
} from '../models/index';

export interface RecyclebinDestroyWorkItemRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
}

export interface RecyclebinGetRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
}

export interface RecyclebinGetDeletedWorkItemShallowReferencesRequest {
    organization: string;
    project: string;
    apiVersion: string;
}

export interface RecyclebinRestoreWorkItemRequest {
    organization: string;
    id: number;
    project: string;
    apiVersion: string;
    body: WorkItemDeleteUpdate;
}

/**
 * 
 */
export class RecyclebinApi extends runtime.BaseAPI {

    /**
     * Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.
     */
    async recyclebinDestroyWorkItemRaw(requestParameters: RecyclebinDestroyWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling recyclebinDestroyWorkItem().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling recyclebinDestroyWorkItem().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling recyclebinDestroyWorkItem().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling recyclebinDestroyWorkItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/recyclebin/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Destroys the specified work item permanently from the Recycle Bin. This action can not be undone.
     */
    async recyclebinDestroyWorkItem(requestParameters: RecyclebinDestroyWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.recyclebinDestroyWorkItemRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a deleted work item from Recycle Bin.
     */
    async recyclebinGetRaw(requestParameters: RecyclebinGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemDelete>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling recyclebinGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling recyclebinGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling recyclebinGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling recyclebinGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/recyclebin/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemDeleteFromJSON(jsonValue));
    }

    /**
     * Gets a deleted work item from Recycle Bin.
     */
    async recyclebinGet(requestParameters: RecyclebinGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemDelete> {
        const response = await this.recyclebinGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.
     */
    async recyclebinGetDeletedWorkItemShallowReferencesRaw(requestParameters: RecyclebinGetDeletedWorkItemShallowReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkItemDeleteShallowReference>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling recyclebinGetDeletedWorkItemShallowReferences().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling recyclebinGetDeletedWorkItemShallowReferences().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling recyclebinGetDeletedWorkItemShallowReferences().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/recyclebin`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkItemDeleteShallowReferenceFromJSON));
    }

    /**
     * Gets a list of the IDs and the URLs of the deleted the work items in the Recycle Bin.
     */
    async recyclebinGetDeletedWorkItemShallowReferences(requestParameters: RecyclebinGetDeletedWorkItemShallowReferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkItemDeleteShallowReference>> {
        const response = await this.recyclebinGetDeletedWorkItemShallowReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restores the deleted work item from Recycle Bin.
     */
    async recyclebinRestoreWorkItemRaw(requestParameters: RecyclebinRestoreWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemDelete>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling recyclebinRestoreWorkItem().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling recyclebinRestoreWorkItem().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling recyclebinRestoreWorkItem().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling recyclebinRestoreWorkItem().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling recyclebinRestoreWorkItem().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/recyclebin/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkItemDeleteUpdateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemDeleteFromJSON(jsonValue));
    }

    /**
     * Restores the deleted work item from Recycle Bin.
     */
    async recyclebinRestoreWorkItem(requestParameters: RecyclebinRestoreWorkItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemDelete> {
        const response = await this.recyclebinRestoreWorkItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

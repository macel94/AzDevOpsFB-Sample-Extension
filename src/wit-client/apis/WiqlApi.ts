/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Wiql,
  WorkItemQueryResult,
} from '../models/index';
import {
    WiqlFromJSON,
    WiqlToJSON,
    WorkItemQueryResultFromJSON,
    WorkItemQueryResultToJSON,
} from '../models/index';

export interface WiqlGetRequest {
    organization: string;
    id: string;
    project: string;
    team: string;
    apiVersion: string;
    timePrecision?: boolean;
    $top?: number;
}

export interface WiqlQueryByIdRequest {
    organization: string;
    id: string;
    project: string;
    team: string;
    apiVersion: string;
    timePrecision?: boolean;
    $top?: number;
}

export interface WiqlQueryByWiqlRequest {
    organization: string;
    project: string;
    team: string;
    apiVersion: string;
    body: Wiql;
    timePrecision?: boolean;
    $top?: number;
}

/**
 * 
 */
export class WiqlApi extends runtime.BaseAPI {

    /**
     * Gets the results of the query given the query ID.
     */
    async wiqlGetRaw(requestParameters: WiqlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling wiqlGet().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling wiqlGet().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling wiqlGet().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling wiqlGet().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling wiqlGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timePrecision'] != null) {
            queryParameters['timePrecision'] = requestParameters['timePrecision'];
        }

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/wiql/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Gets the results of the query given the query ID.
     */
    async wiqlGet(requestParameters: WiqlGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.wiqlGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the results of the query given the query ID.
     */
    async wiqlQueryByIdRaw(requestParameters: WiqlQueryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemQueryResult>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling wiqlQueryById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling wiqlQueryById().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling wiqlQueryById().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling wiqlQueryById().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling wiqlQueryById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timePrecision'] != null) {
            queryParameters['timePrecision'] = requestParameters['timePrecision'];
        }

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/wiql/{id}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets the results of the query given the query ID.
     */
    async wiqlQueryById(requestParameters: WiqlQueryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemQueryResult> {
        const response = await this.wiqlQueryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the results of the query given its WIQL.
     */
    async wiqlQueryByWiqlRaw(requestParameters: WiqlQueryByWiqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkItemQueryResult>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling wiqlQueryByWiql().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling wiqlQueryByWiql().'
            );
        }

        if (requestParameters['team'] == null) {
            throw new runtime.RequiredError(
                'team',
                'Required parameter "team" was null or undefined when calling wiqlQueryByWiql().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling wiqlQueryByWiql().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling wiqlQueryByWiql().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timePrecision'] != null) {
            queryParameters['timePrecision'] = requestParameters['timePrecision'];
        }

        if (requestParameters['$top'] != null) {
            queryParameters['$top'] = requestParameters['$top'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/{team}/_apis/wit/wiql`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters['team']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WiqlToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkItemQueryResultFromJSON(jsonValue));
    }

    /**
     * Gets the results of the query given its WIQL.
     */
    async wiqlQueryByWiql(requestParameters: WiqlQueryByWiqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkItemQueryResult> {
        const response = await this.wiqlQueryByWiqlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

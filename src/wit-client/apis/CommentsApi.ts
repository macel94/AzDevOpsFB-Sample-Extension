/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Comment,
  CommentCreate,
  CommentList,
  CommentUpdate,
} from '../models/index';
import {
    CommentFromJSON,
    CommentToJSON,
    CommentCreateFromJSON,
    CommentCreateToJSON,
    CommentListFromJSON,
    CommentListToJSON,
    CommentUpdateFromJSON,
    CommentUpdateToJSON,
} from '../models/index';

export interface CommentsAddCommentRequest {
    organization: string;
    project: string;
    workItemId: number;
    apiVersion: string;
    body: CommentCreate;
}

export interface CommentsDeleteRequest {
    organization: string;
    project: string;
    workItemId: number;
    commentId: number;
    apiVersion: string;
}

export interface CommentsGetCommentRequest {
    organization: string;
    project: string;
    workItemId: number;
    commentId: number;
    apiVersion: string;
    includeDeleted?: boolean;
    $expand?: CommentsGetCommentExpandEnum;
}

export interface CommentsGetCommentsBatchRequest {
    organization: string;
    project: string;
    workItemId: number;
    ids: string;
    apiVersion: string;
    includeDeleted?: boolean;
    $expand?: CommentsGetCommentsBatchExpandEnum;
}

export interface CommentsUpdateCommentRequest {
    organization: string;
    project: string;
    workItemId: number;
    commentId: number;
    apiVersion: string;
    body: CommentUpdate;
}

/**
 * 
 */
export class CommentsApi extends runtime.BaseAPI {

    /**
     * Add a comment on a work item.
     */
    async commentsAddCommentRaw(requestParameters: CommentsAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentsAddComment().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentsAddComment().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentsAddComment().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentsAddComment().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling commentsAddComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentCreateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     * Add a comment on a work item.
     */
    async commentsAddComment(requestParameters: CommentsAddCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.commentsAddCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a comment on a work item.
     */
    async commentsDeleteRaw(requestParameters: CommentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentsDelete().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentsDelete().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentsDelete().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling commentsDelete().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a comment on a work item.
     */
    async commentsDelete(requestParameters: CommentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.commentsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a work item comment.
     */
    async commentsGetCommentRaw(requestParameters: CommentsGetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentsGetComment().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentsGetComment().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentsGetComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling commentsGetComment().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentsGetComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeDeleted'] != null) {
            queryParameters['includeDeleted'] = requestParameters['includeDeleted'];
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     * Returns a work item comment.
     */
    async commentsGetComment(requestParameters: CommentsGetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.commentsGetCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of work item comments by ids.
     */
    async commentsGetCommentsBatchRaw(requestParameters: CommentsGetCommentsBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentList>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentsGetCommentsBatch().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentsGetCommentsBatch().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentsGetCommentsBatch().'
            );
        }

        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling commentsGetCommentsBatch().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentsGetCommentsBatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['includeDeleted'] != null) {
            queryParameters['includeDeleted'] = requestParameters['includeDeleted'];
        }

        if (requestParameters['$expand'] != null) {
            queryParameters['$expand'] = requestParameters['$expand'];
        }

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentListFromJSON(jsonValue));
    }

    /**
     * Returns a list of work item comments by ids.
     */
    async commentsGetCommentsBatch(requestParameters: CommentsGetCommentsBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentList> {
        const response = await this.commentsGetCommentsBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a comment on a work item.
     */
    async commentsUpdateCommentRaw(requestParameters: CommentsUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Comment>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling commentsUpdateComment().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling commentsUpdateComment().'
            );
        }

        if (requestParameters['workItemId'] == null) {
            throw new runtime.RequiredError(
                'workItemId',
                'Required parameter "workItemId" was null or undefined when calling commentsUpdateComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling commentsUpdateComment().'
            );
        }

        if (requestParameters['apiVersion'] == null) {
            throw new runtime.RequiredError(
                'apiVersion',
                'Required parameter "apiVersion" was null or undefined when calling commentsUpdateComment().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling commentsUpdateComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["vso.work_write"]);
        }

        const response = await this.request({
            path: `/{organization}/{project}/_apis/wit/workItems/{workItemId}/comments/{commentId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"project"}}`, encodeURIComponent(String(requestParameters['project']))).replace(`{${"workItemId"}}`, encodeURIComponent(String(requestParameters['workItemId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CommentUpdateToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentFromJSON(jsonValue));
    }

    /**
     * Update a comment on a work item.
     */
    async commentsUpdateComment(requestParameters: CommentsUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Comment> {
        const response = await this.commentsUpdateCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CommentsGetCommentExpandEnum = {
    None: 'none',
    Reactions: 'reactions',
    RenderedText: 'renderedText',
    RenderedTextOnly: 'renderedTextOnly',
    All: 'all'
} as const;
export type CommentsGetCommentExpandEnum = typeof CommentsGetCommentExpandEnum[keyof typeof CommentsGetCommentExpandEnum];
/**
 * @export
 */
export const CommentsGetCommentsBatchExpandEnum = {
    None: 'none',
    Reactions: 'reactions',
    RenderedText: 'renderedText',
    RenderedTextOnly: 'renderedTextOnly',
    All: 'all'
} as const;
export type CommentsGetCommentsBatchExpandEnum = typeof CommentsGetCommentsBatchExpandEnum[keyof typeof CommentsGetCommentsBatchExpandEnum];

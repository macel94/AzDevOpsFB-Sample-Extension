/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The JSON model for a JSON Patch operation
 * @export
 * @interface JsonPatchOperation
 */
export interface JsonPatchOperation {
    /**
     * The path to copy from for the Move/Copy operation.
     * @type {string}
     * @memberof JsonPatchOperation
     */
    from?: string;
    /**
     * The patch operation
     * @type {string}
     * @memberof JsonPatchOperation
     */
    op?: JsonPatchOperationOpEnum;
    /**
     * The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The "-" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).
     * @type {string}
     * @memberof JsonPatchOperation
     */
    path?: string;
    /**
     * The value for the operation. This is either a primitive or a JToken.
     * @type {object}
     * @memberof JsonPatchOperation
     */
    value?: object;
}


/**
 * @export
 */
export const JsonPatchOperationOpEnum = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test'
} as const;
export type JsonPatchOperationOpEnum = typeof JsonPatchOperationOpEnum[keyof typeof JsonPatchOperationOpEnum];


/**
 * Check if a given object implements the JsonPatchOperation interface.
 */
export function instanceOfJsonPatchOperation(value: object): value is JsonPatchOperation {
    return true;
}

export function JsonPatchOperationFromJSON(json: any): JsonPatchOperation {
    return JsonPatchOperationFromJSONTyped(json, false);
}

export function JsonPatchOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): JsonPatchOperation {
    if (json == null) {
        return json;
    }
    return {
        
        'from': json['from'] == null ? undefined : json['from'],
        'op': json['op'] == null ? undefined : json['op'],
        'path': json['path'] == null ? undefined : json['path'],
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function JsonPatchOperationToJSON(json: any): JsonPatchOperation {
    return JsonPatchOperationToJSONTyped(json, false);
}

export function JsonPatchOperationToJSONTyped(value?: JsonPatchOperation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'from': value['from'],
        'op': value['op'],
        'path': value['path'],
        'value': value['value'],
    };
}


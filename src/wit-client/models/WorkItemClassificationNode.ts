/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';

/**
 * Defines a classification node for work item tracking.
 * @export
 * @interface WorkItemClassificationNode
 */
export interface WorkItemClassificationNode {
    /**
     * Dictionary that has node attributes like start/finish date for iteration nodes.
     * @type {{ [key: string]: object; }}
     * @memberof WorkItemClassificationNode
     */
    attributes?: { [key: string]: object; };
    /**
     * List of child nodes fetched.
     * @type {Array<WorkItemClassificationNode>}
     * @memberof WorkItemClassificationNode
     */
    children?: Array<WorkItemClassificationNode>;
    /**
     * Flag that indicates if the classification node has any child nodes.
     * @type {boolean}
     * @memberof WorkItemClassificationNode
     */
    hasChildren?: boolean;
    /**
     * Integer ID of the classification node.
     * @type {number}
     * @memberof WorkItemClassificationNode
     */
    id?: number;
    /**
     * GUID ID of the classification node.
     * @type {string}
     * @memberof WorkItemClassificationNode
     */
    identifier?: string;
    /**
     * Name of the classification node.
     * @type {string}
     * @memberof WorkItemClassificationNode
     */
    name?: string;
    /**
     * Path of the classification node.
     * @type {string}
     * @memberof WorkItemClassificationNode
     */
    path?: string;
    /**
     * Node structure type.
     * @type {string}
     * @memberof WorkItemClassificationNode
     */
    structureType?: WorkItemClassificationNodeStructureTypeEnum;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof WorkItemClassificationNode
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof WorkItemClassificationNode
     */
    url?: string;
}


/**
 * @export
 */
export const WorkItemClassificationNodeStructureTypeEnum = {
    Area: 'area',
    Iteration: 'iteration'
} as const;
export type WorkItemClassificationNodeStructureTypeEnum = typeof WorkItemClassificationNodeStructureTypeEnum[keyof typeof WorkItemClassificationNodeStructureTypeEnum];


/**
 * Check if a given object implements the WorkItemClassificationNode interface.
 */
export function instanceOfWorkItemClassificationNode(value: object): value is WorkItemClassificationNode {
    return true;
}

export function WorkItemClassificationNodeFromJSON(json: any): WorkItemClassificationNode {
    return WorkItemClassificationNodeFromJSONTyped(json, false);
}

export function WorkItemClassificationNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkItemClassificationNode {
    if (json == null) {
        return json;
    }
    return {
        
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(WorkItemClassificationNodeFromJSON)),
        'hasChildren': json['hasChildren'] == null ? undefined : json['hasChildren'],
        'id': json['id'] == null ? undefined : json['id'],
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'name': json['name'] == null ? undefined : json['name'],
        'path': json['path'] == null ? undefined : json['path'],
        'structureType': json['structureType'] == null ? undefined : json['structureType'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function WorkItemClassificationNodeToJSON(json: any): WorkItemClassificationNode {
    return WorkItemClassificationNodeToJSONTyped(json, false);
}

export function WorkItemClassificationNodeToJSONTyped(value?: WorkItemClassificationNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'attributes': value['attributes'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(WorkItemClassificationNodeToJSON)),
        'hasChildren': value['hasChildren'],
        'id': value['id'],
        'identifier': value['identifier'],
        'name': value['name'],
        'path': value['path'],
        'structureType': value['structureType'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}


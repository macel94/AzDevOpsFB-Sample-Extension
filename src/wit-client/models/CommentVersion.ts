/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityRef } from './IdentityRef';
import {
    IdentityRefFromJSON,
    IdentityRefFromJSONTyped,
    IdentityRefToJSON,
    IdentityRefToJSONTyped,
} from './IdentityRef';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';

/**
 * Represents a specific version of a comment on a work item.
 * @export
 * @interface CommentVersion
 */
export interface CommentVersion {
    /**
     * 
     * @type {IdentityRef}
     * @memberof CommentVersion
     */
    createdBy?: IdentityRef;
    /**
     * The creation date of the comment.
     * @type {Date}
     * @memberof CommentVersion
     */
    createdDate?: Date;
    /**
     * Effective Date/time value for adding the comment. Can be optionally different from CreatedDate.
     * @type {Date}
     * @memberof CommentVersion
     */
    createdOnBehalfDate?: Date;
    /**
     * 
     * @type {IdentityRef}
     * @memberof CommentVersion
     */
    createdOnBehalfOf?: IdentityRef;
    /**
     * The id assigned to the comment.
     * @type {number}
     * @memberof CommentVersion
     */
    id?: number;
    /**
     * Indicates if the comment has been deleted at this version.
     * @type {boolean}
     * @memberof CommentVersion
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {IdentityRef}
     * @memberof CommentVersion
     */
    modifiedBy?: IdentityRef;
    /**
     * The modification date of the comment for this version.
     * @type {Date}
     * @memberof CommentVersion
     */
    modifiedDate?: Date;
    /**
     * The rendered content of the comment at this version.
     * @type {string}
     * @memberof CommentVersion
     */
    renderedText?: string;
    /**
     * The text of the comment at this version.
     * @type {string}
     * @memberof CommentVersion
     */
    text?: string;
    /**
     * The version number.
     * @type {number}
     * @memberof CommentVersion
     */
    version?: number;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof CommentVersion
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof CommentVersion
     */
    url?: string;
}

/**
 * Check if a given object implements the CommentVersion interface.
 */
export function instanceOfCommentVersion(value: object): value is CommentVersion {
    return true;
}

export function CommentVersionFromJSON(json: any): CommentVersion {
    return CommentVersionFromJSONTyped(json, false);
}

export function CommentVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentVersion {
    if (json == null) {
        return json;
    }
    return {
        
        'createdBy': json['createdBy'] == null ? undefined : IdentityRefFromJSON(json['createdBy']),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'createdOnBehalfDate': json['createdOnBehalfDate'] == null ? undefined : (new Date(json['createdOnBehalfDate'])),
        'createdOnBehalfOf': json['createdOnBehalfOf'] == null ? undefined : IdentityRefFromJSON(json['createdOnBehalfOf']),
        'id': json['id'] == null ? undefined : json['id'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'modifiedBy': json['modifiedBy'] == null ? undefined : IdentityRefFromJSON(json['modifiedBy']),
        'modifiedDate': json['modifiedDate'] == null ? undefined : (new Date(json['modifiedDate'])),
        'renderedText': json['renderedText'] == null ? undefined : json['renderedText'],
        'text': json['text'] == null ? undefined : json['text'],
        'version': json['version'] == null ? undefined : json['version'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CommentVersionToJSON(json: any): CommentVersion {
    return CommentVersionToJSONTyped(json, false);
}

export function CommentVersionToJSONTyped(value?: CommentVersion | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdBy': IdentityRefToJSON(value['createdBy']),
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
        'createdOnBehalfDate': value['createdOnBehalfDate'] == null ? undefined : ((value['createdOnBehalfDate']).toISOString()),
        'createdOnBehalfOf': IdentityRefToJSON(value['createdOnBehalfOf']),
        'id': value['id'],
        'isDeleted': value['isDeleted'],
        'modifiedBy': IdentityRefToJSON(value['modifiedBy']),
        'modifiedDate': value['modifiedDate'] == null ? undefined : ((value['modifiedDate']).toISOString()),
        'renderedText': value['renderedText'],
        'text': value['text'],
        'version': value['version'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}


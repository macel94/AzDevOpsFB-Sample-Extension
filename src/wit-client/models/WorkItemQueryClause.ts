/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkItemFieldOperation } from './WorkItemFieldOperation';
import {
    WorkItemFieldOperationFromJSON,
    WorkItemFieldOperationFromJSONTyped,
    WorkItemFieldOperationToJSON,
    WorkItemFieldOperationToJSONTyped,
} from './WorkItemFieldOperation';
import type { WorkItemFieldReference } from './WorkItemFieldReference';
import {
    WorkItemFieldReferenceFromJSON,
    WorkItemFieldReferenceFromJSONTyped,
    WorkItemFieldReferenceToJSON,
    WorkItemFieldReferenceToJSONTyped,
} from './WorkItemFieldReference';

/**
 * Represents a clause in a work item query. This shows the structure of a work item query.
 * @export
 * @interface WorkItemQueryClause
 */
export interface WorkItemQueryClause {
    /**
     * Child clauses if the current clause is a logical operator
     * @type {Array<WorkItemQueryClause>}
     * @memberof WorkItemQueryClause
     */
    clauses?: Array<WorkItemQueryClause>;
    /**
     * 
     * @type {WorkItemFieldReference}
     * @memberof WorkItemQueryClause
     */
    field?: WorkItemFieldReference;
    /**
     * 
     * @type {WorkItemFieldReference}
     * @memberof WorkItemQueryClause
     */
    fieldValue?: WorkItemFieldReference;
    /**
     * Determines if this is a field to field comparison
     * @type {boolean}
     * @memberof WorkItemQueryClause
     */
    isFieldValue?: boolean;
    /**
     * Logical operator separating the condition clause
     * @type {string}
     * @memberof WorkItemQueryClause
     */
    logicalOperator?: WorkItemQueryClauseLogicalOperatorEnum;
    /**
     * 
     * @type {WorkItemFieldOperation}
     * @memberof WorkItemQueryClause
     */
    operator?: WorkItemFieldOperation;
    /**
     * Right side of the condition when a field to value comparison
     * @type {string}
     * @memberof WorkItemQueryClause
     */
    value?: string;
}


/**
 * @export
 */
export const WorkItemQueryClauseLogicalOperatorEnum = {
    None: 'none',
    And: 'and',
    Or: 'or'
} as const;
export type WorkItemQueryClauseLogicalOperatorEnum = typeof WorkItemQueryClauseLogicalOperatorEnum[keyof typeof WorkItemQueryClauseLogicalOperatorEnum];


/**
 * Check if a given object implements the WorkItemQueryClause interface.
 */
export function instanceOfWorkItemQueryClause(value: object): value is WorkItemQueryClause {
    return true;
}

export function WorkItemQueryClauseFromJSON(json: any): WorkItemQueryClause {
    return WorkItemQueryClauseFromJSONTyped(json, false);
}

export function WorkItemQueryClauseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkItemQueryClause {
    if (json == null) {
        return json;
    }
    return {
        
        'clauses': json['clauses'] == null ? undefined : ((json['clauses'] as Array<any>).map(WorkItemQueryClauseFromJSON)),
        'field': json['field'] == null ? undefined : WorkItemFieldReferenceFromJSON(json['field']),
        'fieldValue': json['fieldValue'] == null ? undefined : WorkItemFieldReferenceFromJSON(json['fieldValue']),
        'isFieldValue': json['isFieldValue'] == null ? undefined : json['isFieldValue'],
        'logicalOperator': json['logicalOperator'] == null ? undefined : json['logicalOperator'],
        'operator': json['operator'] == null ? undefined : WorkItemFieldOperationFromJSON(json['operator']),
        'value': json['value'] == null ? undefined : json['value'],
    };
}

export function WorkItemQueryClauseToJSON(json: any): WorkItemQueryClause {
    return WorkItemQueryClauseToJSONTyped(json, false);
}

export function WorkItemQueryClauseToJSONTyped(value?: WorkItemQueryClause | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clauses': value['clauses'] == null ? undefined : ((value['clauses'] as Array<any>).map(WorkItemQueryClauseToJSON)),
        'field': WorkItemFieldReferenceToJSON(value['field']),
        'fieldValue': WorkItemFieldReferenceToJSON(value['fieldValue']),
        'isFieldValue': value['isFieldValue'],
        'logicalOperator': value['logicalOperator'],
        'operator': WorkItemFieldOperationToJSON(value['operator']),
        'value': value['value'],
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityReference } from './IdentityReference';
import {
    IdentityReferenceFromJSON,
    IdentityReferenceFromJSONTyped,
    IdentityReferenceToJSON,
    IdentityReferenceToJSONTyped,
} from './IdentityReference';
import type { WorkItemQueryClause } from './WorkItemQueryClause';
import {
    WorkItemQueryClauseFromJSON,
    WorkItemQueryClauseFromJSONTyped,
    WorkItemQueryClauseToJSON,
    WorkItemQueryClauseToJSONTyped,
} from './WorkItemQueryClause';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';
import type { WorkItemQuerySortColumn } from './WorkItemQuerySortColumn';
import {
    WorkItemQuerySortColumnFromJSON,
    WorkItemQuerySortColumnFromJSONTyped,
    WorkItemQuerySortColumnToJSON,
    WorkItemQuerySortColumnToJSONTyped,
} from './WorkItemQuerySortColumn';
import type { WorkItemFieldReference } from './WorkItemFieldReference';
import {
    WorkItemFieldReferenceFromJSON,
    WorkItemFieldReferenceFromJSONTyped,
    WorkItemFieldReferenceToJSON,
    WorkItemFieldReferenceToJSONTyped,
} from './WorkItemFieldReference';

/**
 * Represents an item in the work item query hierarchy. This can be either a query or a folder.
 * @export
 * @interface QueryHierarchyItem
 */
export interface QueryHierarchyItem {
    /**
     * The child query items inside a query folder.
     * @type {Array<QueryHierarchyItem>}
     * @memberof QueryHierarchyItem
     */
    children?: Array<QueryHierarchyItem>;
    /**
     * 
     * @type {WorkItemQueryClause}
     * @memberof QueryHierarchyItem
     */
    clauses?: WorkItemQueryClause;
    /**
     * The columns of the query.
     * @type {Array<WorkItemFieldReference>}
     * @memberof QueryHierarchyItem
     */
    columns?: Array<WorkItemFieldReference>;
    /**
     * 
     * @type {IdentityReference}
     * @memberof QueryHierarchyItem
     */
    createdBy?: IdentityReference;
    /**
     * When the query item was created.
     * @type {Date}
     * @memberof QueryHierarchyItem
     */
    createdDate?: Date;
    /**
     * The link query mode.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    filterOptions?: QueryHierarchyItemFilterOptionsEnum;
    /**
     * If this is a query folder, indicates if it contains any children.
     * @type {boolean}
     * @memberof QueryHierarchyItem
     */
    hasChildren?: boolean;
    /**
     * The id of the query item.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    id?: string;
    /**
     * Indicates if this query item is deleted. Setting this to false on a deleted query item will undelete it. Undeleting a query or folder will not bring back the permission changes that were previously applied to it.
     * @type {boolean}
     * @memberof QueryHierarchyItem
     */
    isDeleted?: boolean;
    /**
     * Indicates if this is a query folder or a query.
     * @type {boolean}
     * @memberof QueryHierarchyItem
     */
    isFolder?: boolean;
    /**
     * Indicates if the WIQL of this query is invalid. This could be due to invalid syntax or a no longer valid area/iteration path.
     * @type {boolean}
     * @memberof QueryHierarchyItem
     */
    isInvalidSyntax?: boolean;
    /**
     * Indicates if this query item is public or private.
     * @type {boolean}
     * @memberof QueryHierarchyItem
     */
    isPublic?: boolean;
    /**
     * 
     * @type {IdentityReference}
     * @memberof QueryHierarchyItem
     */
    lastExecutedBy?: IdentityReference;
    /**
     * When the query was last run.
     * @type {Date}
     * @memberof QueryHierarchyItem
     */
    lastExecutedDate?: Date;
    /**
     * 
     * @type {IdentityReference}
     * @memberof QueryHierarchyItem
     */
    lastModifiedBy?: IdentityReference;
    /**
     * When the query item was last modified.
     * @type {Date}
     * @memberof QueryHierarchyItem
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {WorkItemQueryClause}
     * @memberof QueryHierarchyItem
     */
    linkClauses?: WorkItemQueryClause;
    /**
     * The name of the query item.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    name?: string;
    /**
     * The path of the query item.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    path?: string;
    /**
     * The recursion option for use in a tree query.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    queryRecursionOption?: QueryHierarchyItemQueryRecursionOptionEnum;
    /**
     * The type of query.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    queryType?: QueryHierarchyItemQueryTypeEnum;
    /**
     * The sort columns of the query.
     * @type {Array<WorkItemQuerySortColumn>}
     * @memberof QueryHierarchyItem
     */
    sortColumns?: Array<WorkItemQuerySortColumn>;
    /**
     * 
     * @type {WorkItemQueryClause}
     * @memberof QueryHierarchyItem
     */
    sourceClauses?: WorkItemQueryClause;
    /**
     * 
     * @type {WorkItemQueryClause}
     * @memberof QueryHierarchyItem
     */
    targetClauses?: WorkItemQueryClause;
    /**
     * The WIQL text of the query
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    wiql?: string;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof QueryHierarchyItem
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof QueryHierarchyItem
     */
    url?: string;
}


/**
 * @export
 */
export const QueryHierarchyItemFilterOptionsEnum = {
    WorkItems: 'workItems',
    LinksOneHopMustContain: 'linksOneHopMustContain',
    LinksOneHopMayContain: 'linksOneHopMayContain',
    LinksOneHopDoesNotContain: 'linksOneHopDoesNotContain',
    LinksRecursiveMustContain: 'linksRecursiveMustContain',
    LinksRecursiveMayContain: 'linksRecursiveMayContain',
    LinksRecursiveDoesNotContain: 'linksRecursiveDoesNotContain'
} as const;
export type QueryHierarchyItemFilterOptionsEnum = typeof QueryHierarchyItemFilterOptionsEnum[keyof typeof QueryHierarchyItemFilterOptionsEnum];

/**
 * @export
 */
export const QueryHierarchyItemQueryRecursionOptionEnum = {
    ParentFirst: 'parentFirst',
    ChildFirst: 'childFirst'
} as const;
export type QueryHierarchyItemQueryRecursionOptionEnum = typeof QueryHierarchyItemQueryRecursionOptionEnum[keyof typeof QueryHierarchyItemQueryRecursionOptionEnum];

/**
 * @export
 */
export const QueryHierarchyItemQueryTypeEnum = {
    Flat: 'flat',
    Tree: 'tree',
    OneHop: 'oneHop'
} as const;
export type QueryHierarchyItemQueryTypeEnum = typeof QueryHierarchyItemQueryTypeEnum[keyof typeof QueryHierarchyItemQueryTypeEnum];


/**
 * Check if a given object implements the QueryHierarchyItem interface.
 */
export function instanceOfQueryHierarchyItem(value: object): value is QueryHierarchyItem {
    return true;
}

export function QueryHierarchyItemFromJSON(json: any): QueryHierarchyItem {
    return QueryHierarchyItemFromJSONTyped(json, false);
}

export function QueryHierarchyItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryHierarchyItem {
    if (json == null) {
        return json;
    }
    return {
        
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(QueryHierarchyItemFromJSON)),
        'clauses': json['clauses'] == null ? undefined : WorkItemQueryClauseFromJSON(json['clauses']),
        'columns': json['columns'] == null ? undefined : ((json['columns'] as Array<any>).map(WorkItemFieldReferenceFromJSON)),
        'createdBy': json['createdBy'] == null ? undefined : IdentityReferenceFromJSON(json['createdBy']),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'filterOptions': json['filterOptions'] == null ? undefined : json['filterOptions'],
        'hasChildren': json['hasChildren'] == null ? undefined : json['hasChildren'],
        'id': json['id'] == null ? undefined : json['id'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'isFolder': json['isFolder'] == null ? undefined : json['isFolder'],
        'isInvalidSyntax': json['isInvalidSyntax'] == null ? undefined : json['isInvalidSyntax'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'lastExecutedBy': json['lastExecutedBy'] == null ? undefined : IdentityReferenceFromJSON(json['lastExecutedBy']),
        'lastExecutedDate': json['lastExecutedDate'] == null ? undefined : (new Date(json['lastExecutedDate'])),
        'lastModifiedBy': json['lastModifiedBy'] == null ? undefined : IdentityReferenceFromJSON(json['lastModifiedBy']),
        'lastModifiedDate': json['lastModifiedDate'] == null ? undefined : (new Date(json['lastModifiedDate'])),
        'linkClauses': json['linkClauses'] == null ? undefined : WorkItemQueryClauseFromJSON(json['linkClauses']),
        'name': json['name'] == null ? undefined : json['name'],
        'path': json['path'] == null ? undefined : json['path'],
        'queryRecursionOption': json['queryRecursionOption'] == null ? undefined : json['queryRecursionOption'],
        'queryType': json['queryType'] == null ? undefined : json['queryType'],
        'sortColumns': json['sortColumns'] == null ? undefined : ((json['sortColumns'] as Array<any>).map(WorkItemQuerySortColumnFromJSON)),
        'sourceClauses': json['sourceClauses'] == null ? undefined : WorkItemQueryClauseFromJSON(json['sourceClauses']),
        'targetClauses': json['targetClauses'] == null ? undefined : WorkItemQueryClauseFromJSON(json['targetClauses']),
        'wiql': json['wiql'] == null ? undefined : json['wiql'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function QueryHierarchyItemToJSON(json: any): QueryHierarchyItem {
    return QueryHierarchyItemToJSONTyped(json, false);
}

export function QueryHierarchyItemToJSONTyped(value?: QueryHierarchyItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(QueryHierarchyItemToJSON)),
        'clauses': WorkItemQueryClauseToJSON(value['clauses']),
        'columns': value['columns'] == null ? undefined : ((value['columns'] as Array<any>).map(WorkItemFieldReferenceToJSON)),
        'createdBy': IdentityReferenceToJSON(value['createdBy']),
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
        'filterOptions': value['filterOptions'],
        'hasChildren': value['hasChildren'],
        'id': value['id'],
        'isDeleted': value['isDeleted'],
        'isFolder': value['isFolder'],
        'isInvalidSyntax': value['isInvalidSyntax'],
        'isPublic': value['isPublic'],
        'lastExecutedBy': IdentityReferenceToJSON(value['lastExecutedBy']),
        'lastExecutedDate': value['lastExecutedDate'] == null ? undefined : ((value['lastExecutedDate']).toISOString()),
        'lastModifiedBy': IdentityReferenceToJSON(value['lastModifiedBy']),
        'lastModifiedDate': value['lastModifiedDate'] == null ? undefined : ((value['lastModifiedDate']).toISOString()),
        'linkClauses': WorkItemQueryClauseToJSON(value['linkClauses']),
        'name': value['name'],
        'path': value['path'],
        'queryRecursionOption': value['queryRecursionOption'],
        'queryType': value['queryType'],
        'sortColumns': value['sortColumns'] == null ? undefined : ((value['sortColumns'] as Array<any>).map(WorkItemQuerySortColumnToJSON)),
        'sourceClauses': WorkItemQueryClauseToJSON(value['sourceClauses']),
        'targetClauses': WorkItemQueryClauseToJSON(value['targetClauses']),
        'wiql': value['wiql'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';

/**
 * Contains information about work item comment reaction for a particular reaction type.
 * @export
 * @interface CommentReaction
 */
export interface CommentReaction {
    /**
     * The id of the comment this reaction belongs to.
     * @type {number}
     * @memberof CommentReaction
     */
    commentId?: number;
    /**
     * Total number of reactions for the CommentReactionType.
     * @type {number}
     * @memberof CommentReaction
     */
    count?: number;
    /**
     * Flag to indicate if the current user has engaged on this particular EngagementType (e.g. if they liked the associated comment).
     * @type {boolean}
     * @memberof CommentReaction
     */
    isCurrentUserEngaged?: boolean;
    /**
     * Type of the reaction.
     * @type {string}
     * @memberof CommentReaction
     */
    type?: CommentReactionTypeEnum;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof CommentReaction
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof CommentReaction
     */
    url?: string;
}


/**
 * @export
 */
export const CommentReactionTypeEnum = {
    Like: 'like',
    Dislike: 'dislike',
    Heart: 'heart',
    Hooray: 'hooray',
    Smile: 'smile',
    Confused: 'confused'
} as const;
export type CommentReactionTypeEnum = typeof CommentReactionTypeEnum[keyof typeof CommentReactionTypeEnum];


/**
 * Check if a given object implements the CommentReaction interface.
 */
export function instanceOfCommentReaction(value: object): value is CommentReaction {
    return true;
}

export function CommentReactionFromJSON(json: any): CommentReaction {
    return CommentReactionFromJSONTyped(json, false);
}

export function CommentReactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentReaction {
    if (json == null) {
        return json;
    }
    return {
        
        'commentId': json['commentId'] == null ? undefined : json['commentId'],
        'count': json['count'] == null ? undefined : json['count'],
        'isCurrentUserEngaged': json['isCurrentUserEngaged'] == null ? undefined : json['isCurrentUserEngaged'],
        'type': json['type'] == null ? undefined : json['type'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CommentReactionToJSON(json: any): CommentReaction {
    return CommentReactionToJSONTyped(json, false);
}

export function CommentReactionToJSONTyped(value?: CommentReaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'commentId': value['commentId'],
        'count': value['count'],
        'isCurrentUserEngaged': value['isCurrentUserEngaged'],
        'type': value['type'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}


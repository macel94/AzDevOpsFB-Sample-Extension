/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';

/**
 * 
 * @export
 * @interface CommentMention
 */
export interface CommentMention {
    /**
     * The artifact portion of the parsed text. (i.e. the work item's id)
     * @type {string}
     * @memberof CommentMention
     */
    artifactId?: string;
    /**
     * The type the parser assigned to the mention. (i.e. person, work item, etc)
     * @type {string}
     * @memberof CommentMention
     */
    artifactType?: string;
    /**
     * The comment id of the mention.
     * @type {number}
     * @memberof CommentMention
     */
    commentId?: number;
    /**
     * The resolved target of the mention. An example of this could be a user's tfid
     * @type {string}
     * @memberof CommentMention
     */
    targetId?: string;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof CommentMention
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof CommentMention
     */
    url?: string;
}

/**
 * Check if a given object implements the CommentMention interface.
 */
export function instanceOfCommentMention(value: object): value is CommentMention {
    return true;
}

export function CommentMentionFromJSON(json: any): CommentMention {
    return CommentMentionFromJSONTyped(json, false);
}

export function CommentMentionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentMention {
    if (json == null) {
        return json;
    }
    return {
        
        'artifactId': json['artifactId'] == null ? undefined : json['artifactId'],
        'artifactType': json['artifactType'] == null ? undefined : json['artifactType'],
        'commentId': json['commentId'] == null ? undefined : json['commentId'],
        'targetId': json['targetId'] == null ? undefined : json['targetId'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CommentMentionToJSON(json: any): CommentMention {
    return CommentMentionToJSONTyped(json, false);
}

export function CommentMentionToJSONTyped(value?: CommentMention | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'artifactId': value['artifactId'],
        'artifactType': value['artifactType'],
        'commentId': value['commentId'],
        'targetId': value['targetId'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}


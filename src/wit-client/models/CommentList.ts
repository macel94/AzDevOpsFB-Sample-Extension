/* tslint:disable */
/* eslint-disable */
/**
 * WorkItemTracking
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.2-preview
 * Contact: nugetvss@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
    CommentToJSONTyped,
} from './Comment';
import type { ReferenceLinks } from './ReferenceLinks';
import {
    ReferenceLinksFromJSON,
    ReferenceLinksFromJSONTyped,
    ReferenceLinksToJSON,
    ReferenceLinksToJSONTyped,
} from './ReferenceLinks';

/**
 * Represents a list of work item comments.
 * @export
 * @interface CommentList
 */
export interface CommentList {
    /**
     * List of comments in the current batch.
     * @type {Array<Comment>}
     * @memberof CommentList
     */
    comments?: Array<Comment>;
    /**
     * A string token that can be used to retrieving next page of comments if available. Otherwise null.
     * @type {string}
     * @memberof CommentList
     */
    continuationToken?: string;
    /**
     * The count of comments in the current batch.
     * @type {number}
     * @memberof CommentList
     */
    count?: number;
    /**
     * Uri to the next page of comments if it is available. Otherwise null.
     * @type {string}
     * @memberof CommentList
     */
    nextPage?: string;
    /**
     * Total count of comments on a work item.
     * @type {number}
     * @memberof CommentList
     */
    totalCount?: number;
    /**
     * 
     * @type {ReferenceLinks}
     * @memberof CommentList
     */
    links?: ReferenceLinks;
    /**
     * REST URL for the resource.
     * @type {string}
     * @memberof CommentList
     */
    url?: string;
}

/**
 * Check if a given object implements the CommentList interface.
 */
export function instanceOfCommentList(value: object): value is CommentList {
    return true;
}

export function CommentListFromJSON(json: any): CommentList {
    return CommentListFromJSONTyped(json, false);
}

export function CommentListFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentList {
    if (json == null) {
        return json;
    }
    return {
        
        'comments': json['comments'] == null ? undefined : ((json['comments'] as Array<any>).map(CommentFromJSON)),
        'continuationToken': json['continuationToken'] == null ? undefined : json['continuationToken'],
        'count': json['count'] == null ? undefined : json['count'],
        'nextPage': json['nextPage'] == null ? undefined : json['nextPage'],
        'totalCount': json['totalCount'] == null ? undefined : json['totalCount'],
        'links': json['_links'] == null ? undefined : ReferenceLinksFromJSON(json['_links']),
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function CommentListToJSON(json: any): CommentList {
    return CommentListToJSONTyped(json, false);
}

export function CommentListToJSONTyped(value?: CommentList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comments': value['comments'] == null ? undefined : ((value['comments'] as Array<any>).map(CommentToJSON)),
        'continuationToken': value['continuationToken'],
        'count': value['count'],
        'nextPage': value['nextPage'],
        'totalCount': value['totalCount'],
        '_links': ReferenceLinksToJSON(value['links']),
        'url': value['url'],
    };
}

